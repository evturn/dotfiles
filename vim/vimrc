"            _
"     _   __(_____ ___  __________
"    | | / / / __ `__ \/ ___/ ___/
"   _| |/ / / / / / / / /  / /__
"  (_|___/_/_/ /_/ /_/_/   \___/
"
"  Vim is sponsored by Diet Coke®
"
set nocompatible
set runtimepath+=~/.vim
set directory^=~/.vim/tmp//

syntax on
filetype plugin indent on
syntax sync minlines=256

colorscheme vim-hardaway

set autochdir
set autoindent
set backspace=indent,eol,start
set clipboard=unnamed
set cmdheight=2
set colorcolumn=+1
set completeopt+=longest
set completeopt=menuone,menu,longest
set expandtab
set fillchars+=vert:\ 
set formatoptions-=cro
set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
set incsearch
set laststatus=2
set list
set listchars=trail:·,space:·
set mouse=r
set noshowmode
set nrformats=
set number
set shiftwidth=2
set shortmess=I
set showcmd
set smartcase
set smartindent
set smarttab
set synmaxcol=128
set tabstop=2
set textwidth=79
set title
set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git/,.cabal-sandbox
set wildmenu
set wildmode=longest,list,full

if has('nvim')
  set termguicolors
endif

if !has('gui_running')
  set t_Co=256
endif

execute pathogen#infect()

"""""""""""""""""""""""""""""""
" => auto commands
"""""""""""""""""""""""""""""""
" Revert cursor to terminal settings when exiting Vim
autocmd VimLeave * set guicursor=a:ver25-Cursor/lCursor

" Disable automatic comment insertion on new lines
autocmd FileType * setlocal formatoptions-=cro

autocmd BufNewFile,BufRead,BufReadPost *.ghci,.ghci.conf set filetype=haskell

" Change cursor shape based on current mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

"""""""""""""""""""""""""""""""
" => remappings
"""""""""""""""""""""""""""""""
let mapleader=','
let maplocalleader=' '

" Reassign reverse character search
noremap \ ,

" Source ~/.vimrc while vim is open
nnoremap <leader>sv :source $MYVIMRC<cr>

" Open markdown preview in brower
nnoremap <leader>md :InstantMarkdownPreview<cr>

" vim-fugitive git
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gp :Git push origin master<cr>

" `[b` previous buffer
" `]b` next buffer
" `[B` first buffer
" `]B` last buffer
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

" previous buffer, next buffer
nnoremap <leader>bp :bp<cr>
nnoremap <leader>bn :bn<cr>

" close every window in current tabview but the current
nnoremap <leader>bo <c-w>o

" delete buffer without closing pane
noremap <leader>bd :Bd<cr>

" Remap line motion commands to operate on display lines
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

" Move between windows
map <leader>hh <C-w>h
map <leader>jj <C-w>j
map <leader>kk <C-w>k
map <leader>ll <C-w>l

" `%%` expands path
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" `gf` opens a file in a vertical split when cursor is on a path
nnoremap gf :vertical wincmd f<CR>

map <silent> tw :GhcModTypeInsert<CR>
map <silent> ts :GhcModSplitFunCase<CR>
map <silent> tq :GhcModType<CR>
map <silent> te :GhcModTypeClear<CR>

" Clear last search pattern register by unsetting it on return
nnoremap <CR> :noh<CR><CR>

"""""""""""""""""""""""""""""""
" => netrw
"""""""""""""""""""""""""""""""
let g:netrw_altv = 1
let g:netrw_banner = 0
let g:netrw_dirhistmax = 0
let g:netrw_fastbrowse = 0
let g:netrw_list_hide='.*\.swp$,.DS_Store,*/tmp/*,*.so,*.swp,*.zip,^\.git/$,^\./$'
let g:netrw_liststyle = 0
let g:netrw_preview = 1
let g:netrw_use_errorwindow = 0

" return to netrw buffer
noremap <leader>re :Re<cr>

"""""""""""""""""""""""""""""""
" => highlightedyank
"""""""""""""""""""""""""""""""
let g:highlightedyank_highlight_duration = -1
hi HighlightedyankRegion ctermfg=233 ctermbg=48 guifg=grey7 guibg=SpringGreen1

"""""""""""""""""""""""""""""""
" => tabular
"""""""""""""""""""""""""""""""
let g:haskell_tabular = 1

vmap a= :Tabularize /=<CR>
vmap a; :Tabularize /::<CR>
vmap a- :Tabularize /-><CR>
vmap a, :Tabularize /<-<CR>

"""""""""""""""""""""""""""""""
" => neco-ghc
"""""""""""""""""""""""""""""""
let g:haskellmode_completion_ghc = 1
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

"""""""""""""""""""""""""""""""
" => vim-jsx
"""""""""""""""""""""""""""""""
let g:jsx_ext_required = 0

"""""""""""""""""""""""""""""""
" => haskell-vim
"""""""""""""""""""""""""""""""
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_backpack = 0                " to enable highlighting of backpack keywords
let g:haskell_indent_after_bare_where = 2
let g:haskell_indent_before_where = 2
let g:haskell_indent_case = 2
let g:haskell_indent_do = 2
let g:haskell_indent_guard = 4
let g:haskell_indent_if = 0
let g:haskell_indent_in = 1
let g:haskell_indent_let = 4
let g:haskell_indent_where = 6

"""""""""""""""""""""""""""""""
" => supertab
"""""""""""""""""""""""""""""""
let g:SuperTabDefaultCompletionType = '<c-x><c-o>'

if has("gui_running")
  imap <c-space> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
else " no gui
  if has("unix")
    inoremap <Nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
  endif
endif
"""""""""""""""""""""""""""""""
" => instant-markdown
"""""""""""""""""""""""""""""""
let g:instant_markdown_autostart = 0      " launch preview when markdown file is opened

"""""""""""""""""""""""""""""""
" => lightline
"""""""""""""""""""""""""""""""
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'active': {
  \   'left': [ ['mode', 'paste'],
  \             ['lineinfo'],
  \             ['modified'],
  \             ],
  \   'right': [ 
  \              ['filetype'],
  \              ['fugitive'],
  \              ['absolutepath'],
  \              ]
  \ },
  \ 'component': {
  \   'modified': '%{&ft=="help"?"":&modified?"＋":""}',
  \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}',
  \   'lineinfo': '%3l:%-1v ⌁ %L',
  \   'absolutepath': '%<%F'
  \ },
  \ 'component_function': {
  \    'filetype': 'LightlineFiletype',
  \    'lines': 'LightlineLines',
  \ },
  \ 'component_visible_condition': {
  \   'modified': '(&filetype!="help"&&(&modified||&!modifiable))',
  \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
  \ }

function! LightlineLines()
  let ex = &filetype ==# 'netrw'
  let vl = ex ? '' : line('$')
  let nl = ex ? '' : '␍ '
  return nl . vl
endfunction

function! LightlineFiletype()
  return &filetype ==# 'netrw' ? '' :
       \ &filetype ==# 'javascript.jsx' ? 'javascript' :
       \ &filetype ==# '' ? 'text' :
       \ &filetype
endfunction

